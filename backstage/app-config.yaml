app:
  title: Fusion5 Developer Portal
  baseUrl: ${BASE_URL}
  extensions:
    - entity-content:github-actions/entity
    - entity-card:github-actions/latest-workflow-run
    - entity-card:github-actions/latest-branch-workflow-runs
    - entity-card:github-actions/recent-workflow-runs:
        config:
          filter: kind:component,api,group
organization:
  name: Fusion5

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: ${BASE_URL}
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", "http:", "https:"]
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: ${BASE_URL}
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
integrations:
  github:
    - host: github.com
      apps:
        - $include: github-credentials.yaml

    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

# proxy:
### Example for how to add a proxy endpoint for the frontend.
### A typical reason to do this is to handle HTTPS and CORS for internal services.
# endpoints:
#   '/test':
#     target: 'https://example.com'
#     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: "local" # Alternatives - 'external'
  generator:
    runIn: "local" # Alternatives - 'local'
  publisher:
    type: "local" # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  experimentalExtraAllowedOrigins:
    ["${BASE_URL}", "${BASE_URL}:443", "${BASE_URL}:8443"]
  environment: production
  providers:
    # See https://backstage.io/docs/auth/guest/provider
    github:
      production:
        clientId:
          $include: github-credentials.yaml#clientId
        clientSecret:
          $include: github-credentials.yaml#clientSecret
        signIn:
          resolvers:
            # Matches the GitHub username with the Backstage user entity name.
            # See https://backstage.io/docs/auth/github/provider#resolvers for more resolvers.
            - resolver: usernameMatchingUserEntityName
    microsoft:
      production:
        clientId: ${AZURE_CLIENT_ID}
        clientSecret: ${AZURE_CLIENT_SECRET}
        tenantId: ${AZURE_TENANT_ID}
        signIn:
          resolvers:
            - resolver: emailMatchingUserEntityProfileEmail

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  # orphanStrategy: delete
  processingInterval: { minutes: 5 }
  rules:
    - allow: [Component, System, API, Resource, Location, Template]
  locations:
    - type: url
      target: https://github.com/IntegrationWorks/backstage-templates/blob/main**/template.yaml
  providers:
    githubOrg:
      - id: production
        githubUrl: "https://github.com"
        organization: "IntegrationWorks"
        schedule:
          frequency: PT45M
          timeout: PT3M
    microsoftGraphOrg:
      default:
        tenantId: ${AZURE_TENANT_ID}
        schedule:
          frequency: PT1H
          timeout: PT50M
    github:
      providerId:
        organization: "IntegrationWorks"
        catalogPath: "**/catalog-info.yaml" # string
        filters:
          # branch: "main" # string
        #   repository: "backstage-templates" # Regex
        schedule: # same options as in SchedulerServiceTaskScheduleDefinition
          # supports cron, ISO duration, "human duration" as used in code
          frequency: { minutes: 30 }
          # supports ISO duration, "human duration" as used in code
          timeout: { minutes: 3 }
      templateProvider:
        organization: "IntegrationWorks"
        catalogPath: "**/template.yaml"
        filters:
          repository: "backstage-templates"
        schedule: # same options as in SchedulerServiceTaskScheduleDefinition
          # supports cron, ISO duration, "human duration" as used in code
          frequency: { minutes: 30 }
          # supports ISO duration, "human duration" as used in code
          timeout: { minutes: 3 }
